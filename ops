{"version":1,"ops":[{"type":5,"author":{"id":"b505cbb60ba651400190522029d45f8ed539d93a"},"timestamp":1583865287,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDMxMTU5NTg0NDQ="},"added":["Crash"],"removed":[]},{"type":3,"author":{"id":"61126dd50638da5fdba74dacc34b42b2718f3d44"},"timestamp":1587282418,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYxNjA2ODgwNg==","github-url":"https://github.com/DFHack/stonesense/issues/68#issuecomment-616068806"},"message":"I'm getting this error on running `dfhack` in the terminal, then `stonesense`:\n```\n.dwarffortress/dfhack: line 89: 281534 Segmentation fault      (core dumped) setarch \"$setarch_arch\" -R env LD_PRELOAD=\"$PRELOAD_LIB\" ./libs/Dwarf_Fortress \"$@\"\n```\n\nThe version of dfhack I'm using is `DFHack version 0.47.04-beta1 (release) on x86_64`, and my system is `Linux archlinux 5.6.3-arch1-1 #1 SMP PREEMPT Wed, 08 Apr 2020 07:47:16 +0000 x86_64 GNU/Linux`.\n\nThe issue seems to be exactly the same as: https://github.com/DFHack/dfhack/issues/1521#issuecomment-600003893","files":null},{"type":3,"author":{"id":"61126dd50638da5fdba74dacc34b42b2718f3d44"},"timestamp":1588131844,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYyMDk3Mzg2NQ==","github-url":"https://github.com/DFHack/stonesense/issues/68#issuecomment-620973865"},"message":"Same issue on `DFHack version 0.47.04-r1 (release) on x86_64`","files":null},{"type":3,"author":{"id":"b505cbb60ba651400190522029d45f8ed539d93a"},"timestamp":1588138773,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYyMTAwMTQ0MA==","github-url":"https://github.com/DFHack/stonesense/issues/68#issuecomment-621001440"},"message":"Yeah, Stonesense hasn't been meaningfully changed in almost a year. I'm not sure if this issue is due to something that changed in 0.47 that DFHack hasn't caught yet (which would be surprising at this point, but fixable), an issue that needs to be addressed on the Stonesense side (which would be unlikely to happen any time soon unless someone steps up to maintain Stonesense), or something related to newer systems (in which case I would expect at least some more detail in stderr.log).\n\nYou wouldn't happen to have a stack trace from this to narrow it down, would you? If you have GDB installed, you could run `./dfhack -g` to attach GDB and hopefully generate one when it crashes.","files":null},{"type":3,"author":{"id":"15c3f76112535b4a8bd51be5c03e11d2be4c0ca4"},"timestamp":1588204370,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYyMTUyOTA4Nw==","github-url":"https://github.com/DFHack/stonesense/issues/68#issuecomment-621529087"},"message":"Same issue here. Could it have something to do with dual screens? The stonesense window gets created at weird coordinates. Maybe some buffer doesn't get properly created because of that, which causes stonesense to write in an incorrect location in memory (\"incorrect sRGB profile)","files":null},{"type":6,"author":{"id":"15c3f76112535b4a8bd51be5c03e11d2be4c0ca4"},"timestamp":1588204370,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzY4ODA4MDgx"},"target":"01f01c1f583e8ea3981d3d1044b8cd784aed2ab16b42447bddb85322e9f57567","message":"Same issue here. Could it have something to do with dual screens? The stonesense window gets created at weird coordinates. Maybe some buffer doesn't get properly created because of that, which causes stonesense to write in an incorrect location in memory (\"incorrect sRGB profile).\n\n...Or it has something to do with brand new drivers in Windows 10. Either way. It's annoying that stonesense doesn't give more feedback on what fails. Since I'm in the process of editing the source code, how do I attach myself to the process in Debug?","files":null},{"type":6,"author":{"id":"15c3f76112535b4a8bd51be5c03e11d2be4c0ca4"},"timestamp":1588205039,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzY4ODA5ODky"},"target":"01f01c1f583e8ea3981d3d1044b8cd784aed2ab16b42447bddb85322e9f57567","message":"Same issue here. Could it have something to do with dual screens? The stonesense window gets created at weird coordinates. Maybe some buffer doesn't get properly created because of that, which causes stonesense to write in an incorrect location in memory (\"incorrect sRGB profile).\n\nEDIT: I've got the call stack from debugging. I'll post the info asap.","files":null},{"type":6,"author":{"id":"15c3f76112535b4a8bd51be5c03e11d2be4c0ca4"},"timestamp":1588205480,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzY4ODExMDY5"},"target":"01f01c1f583e8ea3981d3d1044b8cd784aed2ab16b42447bddb85322e9f57567","message":"Same issue here. Could it have something to do with dual screens? The stonesense window gets created at weird coordinates. Maybe some buffer doesn't get properly created because of that, which causes stonesense to write in an incorrect location in memory (\"incorrect sRGB profile).\n\nEDIT: I've got the call stack from debugging. I'll post the info asap.\n\nIt's a memory corruption from something being loaded improperly as soon as stonesense tries to initialize : \n\n\n\u003e  \tstonesense.plug.dll!ContentLoader::parseContentXMLFile(const char * filepath) Line 497\tC++\n\u003e  \tstonesense.plug.dll!ContentLoader::parseContentIndexFile(const char * filepath) Line 431\tC++\n\u003e \tstonesense.plug.dll!ContentLoader::parseContentIndexFile(const char * filepath) Line 436\tC++\n\u003e  \tstonesense.plug.dll!ContentLoader::Load() Line 321\tC++\n\u003e  \tstonesense.plug.dll!reloadPosition() Line 1044\tC++\n\nthe filepath is : stonesense\\\\items\\\\index.txt","files":null},{"type":6,"author":{"id":"15c3f76112535b4a8bd51be5c03e11d2be4c0ca4"},"timestamp":1588206106,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzY4ODEyNjQ3"},"target":"01f01c1f583e8ea3981d3d1044b8cd784aed2ab16b42447bddb85322e9f57567","message":"Same issue here. Could it have something to do with dual screens? The stonesense window gets created at weird coordinates. Maybe some buffer doesn't get properly created because of that, which causes stonesense to write in an incorrect location in memory (\"incorrect sRGB profile).\n\nEDIT: I've got the call stack from debugging. I'll post the info asap.\n\nIt's a memory corruption from something being loaded improperly as soon as stonesense tries to initialize : \n\n\n\u003e  \tstonesense.plug.dll!ContentLoader::parseContentXMLFile(const char * filepath) Line 497\tC++\n\u003e  \tstonesense.plug.dll!ContentLoader::parseContentIndexFile(const char * filepath) Line 431\tC++\n\u003e \tstonesense.plug.dll!ContentLoader::parseContentIndexFile(const char * filepath) Line 436\tC++\n\u003e  \tstonesense.plug.dll!ContentLoader::Load() Line 321\tC++\n\u003e  \tstonesense.plug.dll!reloadPosition() Line 1044\tC++\n\nthe filepath is : stonesense\\\\items\\\\index.txt\n\nEDIT: **grei_items.png** is the culprit.","files":null},{"type":6,"author":{"id":"15c3f76112535b4a8bd51be5c03e11d2be4c0ca4"},"timestamp":1588206527,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzY4ODEzODM2"},"target":"01f01c1f583e8ea3981d3d1044b8cd784aed2ab16b42447bddb85322e9f57567","message":"Same issue here. Could it have something to do with dual screens? The stonesense window gets created at weird coordinates. Maybe some buffer doesn't get properly created because of that, which causes stonesense to write in an incorrect location in memory (\"incorrect sRGB profile).\n\nEDIT: I've got the call stack from debugging. I'll post the info asap.\n\nIt's a memory corruption from something being loaded improperly as soon as stonesense tries to initialize : \n\n\n\u003e \tstonesense.plug.dll!std::operator==\u003cItemConfiguration,std::default_delete\u003cItemConfiguration\u003e\u003e(const std::unique_ptr\u003cItemConfiguration,std::default_delete\u003cItemConfiguration\u003e\u003e \u0026 _Left, void * __formal) Line 2657\tC++\n        stonesense.plug.dll!parseItemElement(TiXmlElement * elemRoot, int basefile) Line 83\tC++\n \tstonesense.plug.dll!addSingleItemConfig(TiXmlElement * elemRoot) Line 32\tC++\n \tstonesense.plug.dll!ContentLoader::parseItemContent(TiXmlElement * elemRoot) Line 561\tC++\n \tstonesense.plug.dll!ContentLoader::parseContentXMLFile(const char * filepath) Line 497\tC++\n \tstonesense.plug.dll!ContentLoader::parseContentIndexFile(const char * filepath) Line 431\tC++\n \tstonesense.plug.dll!ContentLoader::parseContentIndexFile(const char * filepath) Line 436\tC++\n\n\nthe filepath is : stonesense\\\\items\\\\index.txt\n\nEDIT: **grei_items.png** is the culprit.\nAt first I thought it might be because of the space in the subfolder's name so I replaced it with underscore, and I also try to open and re-save the PNG as 8-bits colors instead of 32-bits colors.\nBut neither helped.","files":null},{"type":6,"author":{"id":"15c3f76112535b4a8bd51be5c03e11d2be4c0ca4"},"timestamp":1588206562,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzY4ODEzOTE2"},"target":"01f01c1f583e8ea3981d3d1044b8cd784aed2ab16b42447bddb85322e9f57567","message":"It's a memory corruption from something being loaded improperly as soon as stonesense tries to initialize its assets: \n\n\n\u003e \tstonesense.plug.dll!std::operator==\u003cItemConfiguration,std::default_delete\u003cItemConfiguration\u003e\u003e(const std::unique_ptr\u003cItemConfiguration,std::default_delete\u003cItemConfiguration\u003e\u003e \u0026 _Left, void * __formal) Line 2657\tC++\n        stonesense.plug.dll!parseItemElement(TiXmlElement * elemRoot, int basefile) Line 83\tC++\n \tstonesense.plug.dll!addSingleItemConfig(TiXmlElement * elemRoot) Line 32\tC++\n \tstonesense.plug.dll!ContentLoader::parseItemContent(TiXmlElement * elemRoot) Line 561\tC++\n \tstonesense.plug.dll!ContentLoader::parseContentXMLFile(const char * filepath) Line 497\tC++\n \tstonesense.plug.dll!ContentLoader::parseContentIndexFile(const char * filepath) Line 431\tC++\n \tstonesense.plug.dll!ContentLoader::parseContentIndexFile(const char * filepath) Line 436\tC++\n\n\nthe filepath is : stonesense\\\\items\\\\index.txt\n\nEDIT: **grei_items.png** is the culprit.\nAt first I thought it might be because of the space in the subfolder's name so I replaced it with underscore, and I also try to open and re-save the PNG as 8-bits colors instead of 32-bits colors.\nBut neither helped.","files":null},{"type":3,"author":{"id":"15c3f76112535b4a8bd51be5c03e11d2be4c0ca4"},"timestamp":1588207382,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYyMTU0NTA2Mw==","github-url":"https://github.com/DFHack/stonesense/issues/68#issuecomment-621545063"},"message":"I think it crashes because in `contentLoader-\u003eitemConfigs[main_type] == nullptr` , `itemConfigs[main_type]` is null. It makes the == operand crash on the left side.\n\n_main_type_ has value _BIN_ (the first of the two items in that folder). I don't know why DFHack is not happy with it.","files":null},{"type":6,"author":{"id":"15c3f76112535b4a8bd51be5c03e11d2be4c0ca4"},"timestamp":1588207382,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzY4ODE1ODg0"},"target":"ccec20cdefdbf7deee48056bb96e77354bd22eb58acd1eb51588883197576b7a","message":"I think it crashes because in `contentLoader-\u003eitemConfigs[main_type] == nullptr` , `itemConfigs[main_type]` is null. The watch says that itemsConfigs has a capacity of 0. I'm not sure if it exactly means that it's null but it makes the == operand crash on the left side.\n\n_main_type_ has value _BIN_ (the first of the two items in that folder). I don't know why DFHack is not happy with it.","files":null},{"type":6,"author":{"id":"15c3f76112535b4a8bd51be5c03e11d2be4c0ca4"},"timestamp":1588207871,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzY4ODE3MDM4"},"target":"ccec20cdefdbf7deee48056bb96e77354bd22eb58acd1eb51588883197576b7a","message":"I think it crashes because in `contentLoader-\u003eitemConfigs[main_type] == nullptr` , `itemConfigs[main_type]` is null. The watch says that itemsConfigs has a capacity of 0. I'm not sure if it exactly means that it's null but it makes the == operand crash on the left side.\n\n_main_type_ has value _BIN_ (the first of the two items in that folder). I don't know why DFHack is not happy with it.\n\nEDIT: Could it be that some faulty code writes poop somwhere into vector _itemConfigs[]_ , hence overwriting the value of what is supposed to be a _std::unique_ptr\u003cItemConfiguration\u003e_ in one of the vector's cells? Replacing it with a bogus pointer that makes C++ sad?","files":null},{"type":6,"author":{"id":"15c3f76112535b4a8bd51be5c03e11d2be4c0ca4"},"timestamp":1588208821,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzY4ODE4OTg5"},"target":"ccec20cdefdbf7deee48056bb96e77354bd22eb58acd1eb51588883197576b7a","message":"I think it crashes because in `contentLoader-\u003eitemConfigs[main_type] == nullptr` , `itemConfigs[main_type]` is bad (FYI main_type has value _BIN_). It makes the == operand crash on the left side.\n\nEDIT: Could it be that some faulty code writes poop somewhere into vector _itemConfigs[]_ , hence overwriting the value of what is supposed to be a _std::unique_ptr\u003cItemConfiguration\u003e_ in one of the vector's cells? Replacing it with a bogus pointer that makes C++ sad?\n\nI also noticed that attribute sheetIndex for this sprite has value 0 but I don't know if it's an issue.","files":null},{"type":6,"author":{"id":"15c3f76112535b4a8bd51be5c03e11d2be4c0ca4"},"timestamp":1588209303,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzY4ODIwMDY2"},"target":"ccec20cdefdbf7deee48056bb96e77354bd22eb58acd1eb51588883197576b7a","message":"I think it crashes because of this : \n- The XML loader successfully loads the attributes of item \"BIN\" and identifies that it's _main_type_ 31.\n- But then somehow when the game tries to access `contentLoader-\u003eitemConfigs[main_type]` , itemConfigs has a capacity of 0. You can't access cell 31 in an array or vector that has zero cells.\n\nWhat I don't understand though, is **why the array is not enlarged beforehand.**\n_ItemConfiguration_ seems to be managed in an different way than, for example, _CreatureConfiguration_, which has a \"push\" mechanism instead of just accessing the cells by index.","files":null},{"type":6,"author":{"id":"15c3f76112535b4a8bd51be5c03e11d2be4c0ca4"},"timestamp":1588254320,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzY4OTYyNzE4"},"target":"ccec20cdefdbf7deee48056bb96e77354bd22eb58acd1eb51588883197576b7a","message":"I think it crashes because of this : \n- In stonesense/items/greiger_items/greiger_items.xml, The XML loader successfully loads the attributes of item \"BIN\" and identifies that it's _main_type_ 31.\n- But then somehow when the game tries to access `contentLoader-\u003eitemConfigs[main_type]` , itemConfigs has a capacity of 0. You can't access cell 31 in an array or vector that has zero cells.\n\nWhat I don't understand though, is **why the array is not enlarged beforehand.**\n_ItemConfiguration_ seems to be managed in an different way than, for example, _CreatureConfiguration_, which has a \"push\" mechanism instead of just accessing the cells by index.","files":null},{"type":3,"author":{"id":"61126dd50638da5fdba74dacc34b42b2718f3d44"},"timestamp":1588293984,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYyMjE5NDI4NQ==","github-url":"https://github.com/DFHack/stonesense/issues/68#issuecomment-622194285"},"message":"https://github.com/DFHack/dfhack/issues/1521#issuecomment-600003893 also reaches the same conclusion.","files":null},{"type":3,"author":{"id":"6790946dd548701e70eeeb1d5c94eebf6f371a4e"},"timestamp":1588311336,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYyMjI1NzA0OA==","github-url":"https://github.com/DFHack/stonesense/issues/68#issuecomment-622257048"},"message":"I'll try to get this fixed.","files":null},{"type":3,"author":{"id":"6790946dd548701e70eeeb1d5c94eebf6f371a4e"},"timestamp":1588313742,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYyMjI2NTUyMA==","github-url":"https://github.com/DFHack/stonesense/issues/68#issuecomment-622265520"},"message":"29b430dc broke this by removing the part where it makes sure that the item array is the right length.","files":null},{"type":3,"author":{"id":"15c3f76112535b4a8bd51be5c03e11d2be4c0ca4"},"timestamp":1588461372,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYyMzAyNzk2Ng==","github-url":"https://github.com/DFHack/stonesense/issues/68#issuecomment-623027966"},"message":"Not sure you're quoting the correct commit, as the one you quoted mentions TerrainMaterialConfiguration, whereas this issue is with ItemConfiguration ? (Even though the logic _does_ seem similar and _does_ seem to have been broken)","files":null},{"type":3,"author":{"id":"6790946dd548701e70eeeb1d5c94eebf6f371a4e"},"timestamp":1588468811,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYyMzAzODI1Nw==","github-url":"https://github.com/DFHack/stonesense/issues/68#issuecomment-623038257"},"message":"Oh, he changed a bunch of things, but I realized that his specific chances weren't what was causing it. Still trying to make sure I caught everything, 5b7e774 may fix it.","files":null},{"type":3,"author":{"id":"15c3f76112535b4a8bd51be5c03e11d2be4c0ca4"},"timestamp":1588530933,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYyMzE1OTAwMg==","github-url":"https://github.com/DFHack/stonesense/issues/68#issuecomment-623159002"},"message":"**Your change does two things :**\n\n1) You changed the way the resizing is done\n- the way it was done before : if the vector is too small, push null into the vector until it reaches the required size. \n- The way you're doing it : if the vector is too small, use _.resize_ to enlarge it,  then put null into every cell. \n\n**This first change is a regression** because you might overwrite the early values of the array.\n\n2) You change the size of the array to _ENUM_LAST_ITEM(item_type) +1_ instead of _ENUM_LAST_ITEM(item_type)_\n\nI think that's the solution to our issue. Before, if we encountered an item type which enum was going up to, let's say, 31, then we would resize the array to 31 instead of 32. Which means we could never go up to the cell at index 31! That was clearly a bug that needed to be fixed.\n\nI shall end with a sour comment about how _once again_ there's a fatal bug in a simple operation because someone thought they were too smart to just use off-the-shelf, one-liner array primitives... and made a mistake in their custom 10-lines replacement.  ;)","files":null},{"type":6,"author":{"id":"15c3f76112535b4a8bd51be5c03e11d2be4c0ca4"},"timestamp":1588530933,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzY5NTI3MDM5"},"target":"5c19700b9afb6f798140b345af03853097d4cf83a1cd69419e7a0a06703b5d07","message":"**Your change does two things :**\n\n1) You changed the way the resizing is done\n- the way it was done before : if the vector is too small, push null into the vector until it reaches the required size. \n- The way you're doing it : if the vector is too small, use _.resize_ to enlarge it,  then put null into every cell. \n\n**This first change is a regression** because you might overwrite the early values of the array.\n\n2) You change the size of the array to _ENUM_LAST_ITEM(item_type) +1_ instead of _ENUM_LAST_ITEM(item_type)_\n\n**I think that's the solution to our issue.** Before, if we encountered an item type which enum was going up to, let's say, 31, then we would resize the array to 31 instead of 32. Which means we could never go up to the cell at index 31! That was clearly a bug that needed to be fixed.\n\nI shall end with a sour comment about how _once again_ there's a fatal bug in a simple operation because someone thought they were too smart to just use off-the-shelf, one-liner array primitives... and made a mistake in their custom 10-lines replacement.  ;)","files":null},{"type":6,"author":{"id":"15c3f76112535b4a8bd51be5c03e11d2be4c0ca4"},"timestamp":1588531055,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzY5NTI3MjIy"},"target":"5c19700b9afb6f798140b345af03853097d4cf83a1cd69419e7a0a06703b5d07","message":"**Your change does two things :**\n\n1) You changed the way the resizing is done\n- the way it was done before : if the vector is too small, push null into the vector until it reaches the required size. \n- The way you're doing it : if the vector is too small, use _.resize_ to enlarge it,  then put null into every cell. \n\n**This first change is a regression** because you might overwrite the early values of the array.\n\n2) You change the size of the array to _ENUM_LAST_ITEM(item_type) +1_ instead of _ENUM_LAST_ITEM(item_type)_\n\n**I think that's the solution to our issue.** Before, if we encountered an item type which enum was going up to, let's say, 31, then we would resize the array to 31 instead of 32. Which means we could never go up to the cell at index 31! **That was clearly a bug that needed to be fixed.**\n\nI shall end with a sour comment about how _once again_ there's a fatal bug in a simple operation because someone thought they were too smart to just use off-the-shelf, one-liner array primitives... and made a mistake in their custom 10-lines replacement.  ;)","files":null},{"type":6,"author":{"id":"15c3f76112535b4a8bd51be5c03e11d2be4c0ca4"},"timestamp":1588531089,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzY5NTI3Mjcx"},"target":"5c19700b9afb6f798140b345af03853097d4cf83a1cd69419e7a0a06703b5d07","message":"**Your change does two things :**\n\n1) You changed the way the resizing is done\n- the way it was done before : if the vector is too small, push null into the vector until it reaches the required size. \n- The way you're doing it : if the vector is too small, use _.resize_ to enlarge it,  then put null into every cell. \n\n**This first change is a regression** because you might overwrite the early values of the array.\n\n2) You change the size of the array to _ENUM_LAST_ITEM(item_type) +1_ instead of _ENUM_LAST_ITEM(item_type)_\n\n**I think that's the solution to our issue.** Before, if we encountered an item type which enum was going up to, let's say, 31, then we would resize the array to 31 instead of 32. Which means we could never go up to the cell at index 31! **That was clearly a bug that needed to be fixed.**\n\nI shall end with a sour comment about how _once again_ when looking at C++ code, there's a fatal bug in a simple operation because someone thought they were too smart to just use off-the-shelf, one-liner array primitives... and made a mistake in their custom 10-lines replacement.  ;)","files":null},{"type":6,"author":{"id":"15c3f76112535b4a8bd51be5c03e11d2be4c0ca4"},"timestamp":1588576573,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzY5NTg4MDUy"},"target":"5c19700b9afb6f798140b345af03853097d4cf83a1cd69419e7a0a06703b5d07","message":"**Your change does two things :**\n\n1) You changed the way the resizing is done\n- the way it was done before : if the vector is too small, clear it entirely then push null into the vector until it reaches the required size. \n- The way you're doing it : if the vector is too small, use _.resize_ to enlarge it,  then put null into every cell. \n\nThis first change is not really necessary.\n\n2) You change the size of the array to _ENUM_LAST_ITEM(item_type) +1_ instead of _ENUM_LAST_ITEM(item_type)_\n\n**I think that's the solution to our issue.** Before, if we encountered an item type which enum was going up to, let's say, 31, then we would resize the array to 31 instead of 32. Which means we could never go up to the cell at index 31! **That was clearly a bug that needed to be fixed.**\n\nI shall end with a sour comment about how _once again_ when looking at C++ code, there's a fatal bug in a simple operation because someone thought they were too smart to just use off-the-shelf, one-liner array primitives... and made a mistake in their custom 10-lines replacement.  ;)","files":null},{"type":6,"author":{"id":"15c3f76112535b4a8bd51be5c03e11d2be4c0ca4"},"timestamp":1588628660,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzY5Nzk1Nzc3"},"target":"5c19700b9afb6f798140b345af03853097d4cf83a1cd69419e7a0a06703b5d07","message":"**Your change does two things :**\n\n1) You changed the way the resizing is done\n- the way it was done before : if the vector is too small, clear it entirely then push null into the vector until it reaches the required size. \n- The way you're doing it : if the vector is too small, use _.resize_ to enlarge it,  then put null into every cell. \n\nThis first change is not really necessary. EDIT: It is necessary\n\n2) You change the size of the array to _ENUM_LAST_ITEM(item_type) +1_ instead of _ENUM_LAST_ITEM(item_type)_\n\n**I think that's the solution to our issue.** Before, if we encountered an item type which enum was going up to, let's say, 31, then we would resize the array to 31 instead of 32. Which means we could never go up to the cell at index 31! **That was clearly a bug that needed to be fixed.**\n\nI shall end with a sour comment about how _once again_ when looking at C++ code, there's a fatal bug in a simple operation because someone thought they were too smart to just use off-the-shelf, one-liner array primitives... and made a mistake in their custom 10-lines replacement.  ;)","files":null},{"type":3,"author":{"id":"15c3f76112535b4a8bd51be5c03e11d2be4c0ca4"},"timestamp":1588580983,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYyMzMyOTg2OA==","github-url":"https://github.com/DFHack/stonesense/issues/68#issuecomment-623329868"},"message":"I've tested it.\nContrary to what I said, both changes are needed. And **I cant explain why** this works...\n\n    if (config.size() != (ENUM_LAST_ITEM(item_type) + 1))\n        config.resize(ENUM_LAST_ITEM(item_type) + 1);\n    for (size_t i = 0; i \u003c config.size(); i++)\n    {\n        config[i] = nullptr;\n    }\n\n\n...while this crashes : \n\n    uint32_t currentsize = (uint32_t)config.size();\n\n    if (currentsize \u003c ENUM_LAST_ITEM(item_type) +1) {\n        currentsize = ENUM_LAST_ITEM(item_type) +1;\n    }\n    config.clear();\n    while (currentsize \u003c config.size()) {\n        config.push_back(nullptr);","files":null},{"type":6,"author":{"id":"15c3f76112535b4a8bd51be5c03e11d2be4c0ca4"},"timestamp":1588580983,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzY5NjAzMDMw"},"target":"a4bac593b679c1b8eeab2df3bbdc55cf112f687795c546ba2e8ea4294eea82aa","message":"I've tested it. It works.\nContrary to what I said, both changes are needed. And **I cant explain why** this works...\n\n    if (config.size() != (ENUM_LAST_ITEM(item_type) + 1))\n        config.resize(ENUM_LAST_ITEM(item_type) + 1);\n    for (size_t i = 0; i \u003c config.size(); i++)\n    {\n        config[i] = nullptr;\n    }\n\n\n...while this crashes : \n\n    uint32_t currentsize = (uint32_t)config.size();\n\n    if (currentsize \u003c ENUM_LAST_ITEM(item_type) +1) {\n        currentsize = ENUM_LAST_ITEM(item_type) +1;\n    }\n    config.clear();\n    while (currentsize \u003c config.size()) {\n        config.push_back(nullptr);","files":null},{"type":3,"author":{"id":"6790946dd548701e70eeeb1d5c94eebf6f371a4e"},"timestamp":1588603919,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYyMzUxMTQ1MQ==","github-url":"https://github.com/DFHack/stonesense/issues/68#issuecomment-623511451"},"message":"This is why I hate C++.","files":null},{"type":3,"author":{"id":"b505cbb60ba651400190522029d45f8ed539d93a"},"timestamp":1588604992,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYyMzUyMTYyNQ==","github-url":"https://github.com/DFHack/stonesense/issues/68#issuecomment-623521625"},"message":"`config = vector\u003cwhatever_type\u003e(ENUM_LAST_ITEM(item_type) + 1, nullptr)` would probably be less error-prone than either of those","files":null},{"type":3,"author":{"id":"15c3f76112535b4a8bd51be5c03e11d2be4c0ca4"},"timestamp":1588608236,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYyMzU1MzcyMg==","github-url":"https://github.com/DFHack/stonesense/issues/68#issuecomment-623553722"},"message":"Ha ha I love how the hardened C++ dev answers \"this would be less error-prone\" rather than \"look, those 10 lines are now one, I used a built-in function\".","files":null},{"type":3,"author":{"id":"b505cbb60ba651400190522029d45f8ed539d93a"},"timestamp":1588610059,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYyMzU3MDAyNw==","github-url":"https://github.com/DFHack/stonesense/issues/68#issuecomment-623570027"},"message":"I mean, re-implementing built-in operations usually is more error-prone regardless of the language. I'm more inclined to blame the logic here rather than the language itself.\n\nLooking again at the two snippets you posted, the main difference I'm seeing is that the first one (which you said works) resizes config to be exactly the desired size, while the second one resizes it to be *at least* the desired size - if it was larger before, it will still be larger. Just by looking at it, I don't see any way that it can crash by itself, but it could probably affect other parts of Stonesense in difficult-to-predict ways. (I would have guessed that the *first* snippet would be more likely to result in a crash later on, but it's hard to say without more context.)","files":null},{"type":6,"author":{"id":"b505cbb60ba651400190522029d45f8ed539d93a"},"timestamp":1588610059,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzY5NzIxNDg1"},"target":"e425dbdf5ce56c3cf7aeff90a48e7c8279bad2c858259e1f485d270c667577bb","message":"I mean, re-implementing built-in operations usually is more error-prone regardless of the language. I'm more inclined to blame the logic here rather than the language itself.\n\nLooking again at the two snippets you posted, the main difference I'm seeing is that the first one (which you said works) resizes config to be exactly the desired size, while the second one resizes it to be *at least* the desired size - if it was larger before, it will still be larger. Just by looking at it, I don't see any way that it can crash by itself, but it could probably affect other parts of Stonesense in difficult-to-predict ways. (I would have guessed that the *first* snippet would be more likely to result in a crash later on, but it's hard to say without more context.)\n\nCasting currentsize from a size_t to a uint32_t (which is sometimes smaller) is inadvisable, but probably unlikely to trigger any issues for smaller vectors.","files":null},{"type":6,"author":{"id":"b505cbb60ba651400190522029d45f8ed539d93a"},"timestamp":1588610233,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzY5NzIyMTc4"},"target":"e425dbdf5ce56c3cf7aeff90a48e7c8279bad2c858259e1f485d270c667577bb","message":"I mean, re-implementing built-in operations usually is more error-prone regardless of the language. I'm more inclined to blame the logic here rather than the language itself.\n\nLooking again at the two snippets you posted, the main difference I'm seeing is that the first one (which you said works) resizes config to be exactly the desired size, while the second one resizes it to be *at least* the desired size - if it was larger before, it will still be larger. Just by looking at it, I don't see any way that it can crash by itself, but it could probably affect other parts of Stonesense in difficult-to-predict ways. (I would have guessed that the *first* snippet would be more likely to result in a crash later on, but it's hard to say without more context.)\n\nCasting currentsize from a size_t to a uint32_t (which is sometimes smaller) is inadvisable, but probably unlikely to trigger any issues for smaller vectors.\n\nEdit: oh, I think I see the issue in the second snippet - `currentsize` is the *desired* size of the vector (it's a misleading name IMO), so if it's set to e.g. 5, it will never be smaller than `config.size()` after `config.clear()` is called (`5 \u003c 0` is false, so the body of the while loop will never run).","files":null},{"type":3,"author":{"id":"6790946dd548701e70eeeb1d5c94eebf6f371a4e"},"timestamp":1588611434,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYyMzU4MjQ0OA==","github-url":"https://github.com/DFHack/stonesense/issues/68#issuecomment-623582448"},"message":"I'm all for using the actual builtin function for this.","files":null},{"type":3,"author":{"id":"6790946dd548701e70eeeb1d5c94eebf6f371a4e"},"timestamp":1588611468,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYyMzU4Mjc0MA==","github-url":"https://github.com/DFHack/stonesense/issues/68#issuecomment-623582740"},"message":"Also DFhack really should have a ENUM_SIZE macro.","files":null},{"type":3,"author":{"id":"15c3f76112535b4a8bd51be5c03e11d2be4c0ca4"},"timestamp":1588628612,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYyMzcyMzMzMg==","github-url":"https://github.com/DFHack/stonesense/issues/68#issuecomment-623723332"},"message":"Ah yes, indeed, there should be two variables (oldSize and targetSize) not just one, since, as you said, after the clear(), well, .size() will return 0 and the code never enters the loop. \nMystery solved! \n\n@RosaryMala not to be lazy but can you check that this way of doing things is not used in other XXXConfiguration.cpp files?","files":null},{"type":6,"author":{"id":"15c3f76112535b4a8bd51be5c03e11d2be4c0ca4"},"timestamp":1588628612,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzY5Nzk1NTky"},"target":"587ac6aa72b54b90703f1b3493e04d5d05a6eccdda9c73c1786425dc24a78dd7","message":"Ah yes, indeed, there should be two variables (oldSize and targetSize) not just one, since, as you said, after the clear(), well, .size() will return 0 and the code never enters the loop. \nMystery solved! \n\nBut that can be dumped altogether if the one-liner is used. So yes, I vote for that.\n\n@RosaryMala not to be lazy but can you check that this way of doing things is not used in other XXXConfiguration.cpp files?","files":null},{"type":6,"author":{"id":"15c3f76112535b4a8bd51be5c03e11d2be4c0ca4"},"timestamp":1588628787,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzY5Nzk2MjI2"},"target":"587ac6aa72b54b90703f1b3493e04d5d05a6eccdda9c73c1786425dc24a78dd7","message":"Ah yes, indeed, it should be _while(config.size()\u003ccurrentSize )_ , not _while(currentsize \u003c config.size())_.\nMystery solved! \n\nBut that can be dumped altogether if the one-liner is used. So yes, I vote for that.\n\n@RosaryMala not to be lazy but can you check that this way of doing things is not used in other XXXConfiguration.cpp files?","files":null},{"type":3,"author":{"id":"6790946dd548701e70eeeb1d5c94eebf6f371a4e"},"timestamp":1588633516,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYyMzc1MzUyNw==","github-url":"https://github.com/DFHack/stonesense/issues/68#issuecomment-623753527"},"message":"Yeah, I'll take a look at the rest of the things and make sure they're all working.","files":null},{"type":3,"author":{"id":"90a6cec4525b3baf7f47c4d40b8990cb43cc9164"},"timestamp":1592772048,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY0NzE3ODExMA==","github-url":"https://github.com/DFHack/stonesense/issues/68#issuecomment-647178110"},"message":"DFHack/stonesense@5b7e774\nCan confirm this works.\nI've managed to build DFHack, with stonesense checkout to this commit, against a last version of Lazy Mac Pack (v0.47.04). \nIt still crashes on any attemp to resize the window, but if you don't change it after launching stonesense it seems to run smoothly.\nIt is also worth mentioning, that I didn't have xcode installed, XML::LibXML installation threw a bunch of errors and XML::LibXSLT didn't install at all. But the DFhack build was OK.\n\nMy first time playing DF =D\n\nAlso I see that the keyboard control issue is still unsolved, and won't be?\nP.S. would be grateful for tips on bulding twbt, as the one included in the Pack refuses to work with latest build of DFHack.","files":null},{"type":6,"author":{"id":"90a6cec4525b3baf7f47c4d40b8990cb43cc9164"},"timestamp":1592772048,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzgwNTYwMjQ3"},"target":"80e71184efb7a8b8b635125ca0a0956d7edf7ae20311f7b2cc71e1bce253f83f","message":"DFHack/stonesense@5b7e774\nCan confirm this works.\nI've managed to build DFHack, with stonesense checkout to this commit, against a last version of Lazy Mac Pack (v0.47.04). \nIt still crashes on any attemp to resize the window, but if you don't change it after launching stonesense it seems to run smoothly.\nIt is also worth mentioning, that I didn't have xcode installed, XML::LibXML installation threw a bunch of errors and XML::LibXSLT didn't install at all. But i was so desperate that I tried the build, and it was OK.\n\nMy first time playing DF =D\n\nAlso I see that the keyboard control issue is still unsolved, and won't be?\nP.S. would be grateful for tips on bulding twbt, as the one included in the Pack refuses to work with latest build of DFHack.","files":null},{"type":3,"author":{"id":"b505cbb60ba651400190522029d45f8ed539d93a"},"timestamp":1592772238,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY0NzE3OTM2MA==","github-url":"https://github.com/DFHack/stonesense/issues/68#issuecomment-647179360"},"message":"We would probably have to move Stonesense to a standalone process to make keyboard input work (that would have other benefits, like crashes not bringing down DF, but would also need someone familiar with Stonesense and willing to put in the effort).\n\nFor reference, I'm pretty sure that the automated builds from https://dfhack.org/builds/ (like [this one](https://buildmaster.lubar.me/applications/3/builds/build?buildId=8028)) include Stonesense.","files":null},{"type":3,"author":{"id":"c4215f9727873d426870f15a6a5b3c9e368d8582"},"timestamp":1593463282,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY1MTM1MTcxMg==","github-url":"https://github.com/DFHack/stonesense/issues/68#issuecomment-651351712"},"message":"Until this is fixed, could someone provide a walkthrough/workaround on how to get this working with say, the LNP? It would be much appreciated \u003c3","files":null},{"type":6,"author":{"id":"c4215f9727873d426870f15a6a5b3c9e368d8582"},"timestamp":1593463282,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzgyMzg4MDIw"},"target":"f4717d3348809d7595f41490c552e297b19054fc6b379330536adcafe6cf6c18","message":"Until this is fixed, could someone provide a brief walkthrough/workaround on how to get this working with say, the LNP? It would be much appreciated \u003c3","files":null},{"type":3,"author":{"id":"b505cbb60ba651400190522029d45f8ed539d93a"},"timestamp":1593473837,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY1MTQyMzQ5OA==","github-url":"https://github.com/DFHack/stonesense/issues/68#issuecomment-651423498"},"message":"If you follow my [automated builds](https://dfhack.org/builds/) link from above, you should get to a page like [this](https://buildmaster.lubar.me/applications/3/builds/build?buildId=8073) (this page may be outdated by the time you click the link, though, so I recommend using the first link instead). Under \"Build artifacts\", choose the build that matches your DF installation (e.g. \"Windows64\" for 64-bit Windows DF). Once that file has downloaded, extract \"hack/plugins/stonesense.plug.(dll, so, or dylib)\" from it and replace the file in your existing hack/plugins folder with it. Generally, when doing this with Stonesense, you should also replace the \"stonesense\" folder with the downloaded copy, but that shouldn't be necessary in this case. When you start DF, you'll probably see a warning that the plugin was built for a different DFHack build, but as long as it starts with \"Warning\", it's safe to ignore.","files":null},{"type":3,"author":{"id":"c4215f9727873d426870f15a6a5b3c9e368d8582"},"timestamp":1593539076,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY1MTk0NDY0Mw==","github-url":"https://github.com/DFHack/stonesense/issues/68#issuecomment-651944643"},"message":"Perfect, thank you. I can confirm this works with PeridexisErrant's Starter Pack 0.47.04-r06.","files":null},{"type":3,"author":{"id":"f99ef43cffb3692c460abddeeb6f73a3829e36f2"},"timestamp":1594643639,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY1NzUzNDEwNQ==","github-url":"https://github.com/DFHack/stonesense/issues/68#issuecomment-657534105"},"message":"Doesn't work for me :/\n```\n[DFHack]# load stonesense\nPlugin stonesense was not built for this version of DFHack.\nPlugin: 0.47.04-r1, DFHack: 0.47.03-beta1\n```","files":null},{"type":3,"author":{"id":"b505cbb60ba651400190522029d45f8ed539d93a"},"timestamp":1594651909,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY1NzYwNjk5MQ==","github-url":"https://github.com/DFHack/stonesense/issues/68#issuecomment-657606991"},"message":"You need to upgrade to DFHack 0.47.04-r1 (which involves upgrading to DF 0.47.04) - the plugin will only work for that version.","files":null},{"type":3,"author":{"id":"b505cbb60ba651400190522029d45f8ed539d93a"},"timestamp":1596906203,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY3MDk1MTE0Ng==","github-url":"https://github.com/DFHack/stonesense/issues/68#issuecomment-670951146"},"message":"Assuming https://github.com/DFHack/stonesense/commit/5b7e7743a1372b929acb2ccb75080e139ac11691 fixed this, this should be addressed in 0.47.04-r2. Feel free to open a new issue if problems continue.","files":null},{"type":4,"author":{"id":"b505cbb60ba651400190522029d45f8ed539d93a"},"timestamp":1596906203,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MzYzNTg0MzM0MA=="},"status":2}]}